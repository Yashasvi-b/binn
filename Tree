import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodesState,
  useEdgesState,
  ReactFlowProvider,
  Node,
  Edge,
  Connection,
  NodeMouseHandler,
} from 'reactflow';
import 'reactflow/dist/style.css';
import axios from 'axios';
import dagre from 'dagre';
import {
  graphContainerStyles,
  controlsLabelStyles,
  controlsSelectStyles,
  reactflowWrapperStyles,
  navbarStyles,
} from './styles'; // import the styles

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  name?: string;
  graphDepth: number;
  parentNode?: string | null;
}

interface CustomNodeData {
  label: string;
}

interface TreeNode {
  id: string;
  data: NodeData;
  children: TreeNode[];
  fetched: boolean; // New field to track if children are fetched
}

const initialNodes: Node<CustomNodeData>[] = [];
const initialEdges: Edge[] = [];

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const getLayoutedNodes = (nodes: Node<CustomNodeData>[], edges: Edge[], direction = 'TB') => {
  const nodeWidth = 172;
  const nodeHeight = 36;

  dagreGraph.setGraph({ rankdir: direction });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  return nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    return node;
  });
};

const getNodeColor = (type: string) => {
  switch (type) {
    case 'input':
      return '#FFD700'; // Gold
    case 'output':
      return '#FF6347'; // Tomato
    case 'option':
      return '#40E0D0'; // Turquoise
    default:
      return '#D3D3D3'; // Light Gray
  }
};

const App: React.FC = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState<Node<CustomNodeData>>(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge>(initialEdges);
  const [allNodes, setAllNodes] = useState<TreeNode[]>([]);
  const [direction, setDirection] = useState('TB');
  const [selectedParentNode, setSelectedParentNode] = useState<string>('');
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());

  const fetchNodes = async (parentNodeId: string | null = null) => {
    try {
      const response = await axios.get<NodeData[]>(`https://api.example.com/nodes?parent=${parentNodeId}`);
      const data = response.data;

      const processedNodes: TreeNode[] = data.map((item) => ({
        id: item.node,
        data: item,
        children: [],
        fetched: false, // Initially, no children are fetched
      }));

      setAllNodes((prevNodes) => {
        if (parentNodeId) {
          return insertNodes(prevNodes, parentNodeId, processedNodes);
        }
        return processedNodes;
      });

      // Set the first node (root node) as the initial node if no parent node is provided
      if (!parentNodeId && processedNodes.length > 0) {
        setNodes([{ id: processedNodes[0].id, type: processedNodes[0].data.type || 'default', data: { label: processedNodes[0].data.name || processedNodes[0].data.node }, position: { x: 0, y: 0 }, style: { backgroundColor: getNodeColor(processedNodes[0].data.type || 'default') } }]);
      }
    } catch (error) {
      console.error('Error fetching node data', error);
    }
  };

  useEffect(() => {
    fetchNodes();
  }, [setNodes]);

  const insertNodes = (nodes: TreeNode[], parentNodeId: string, newNodes: TreeNode[]): TreeNode[] => {
    return nodes.map((node) => {
      if (node.id === parentNodeId) {
        return { ...node, children: newNodes, fetched: true };
      } else {
        return { ...node, children: insertNodes(node.children, parentNodeId, newNodes) };
      }
    });
  };

  const generateEdges = useCallback((nodeId: string) => {
    const findNodeById = (nodes: TreeNode[], id: string): TreeNode | null => {
      for (const node of nodes) {
        if (node.id === id) return node;
        const found = findNodeById(node.children, id);
        if (found) return found;
      }
      return null;
    };

    const node = findNodeById(allNodes, nodeId);
    if (!node) return;

    const newEdges = node.children.map((child) => ({
      id: `e-${node.id}-${child.id}`,
      source: node.id,
      target: child.id,
    }));
    setEdges((prevEdges) => [...prevEdges, ...newEdges]);
  }, [allNodes, setEdges]);

  const expandNode = useCallback((node: Node<CustomNodeData>) => {
    const findNodeById = (nodes: TreeNode[], id: string): TreeNode | null => {
      for (const node of nodes) {
        if (node.id === id) return node;
        const found = findNodeById(node.children, id);
        if (found) return found;
      }
      return null;
    };

    const treeNode = findNodeById(allNodes, node.id);
    if (!treeNode) return;

    if (!treeNode.fetched) {
      fetchNodes(treeNode.id);
      return;
    }

    const childNodes = treeNode.children;
    if (childNodes.length > 0) {
      const newNodes = [...nodes];
      const newEdges = [...edges];

      childNodes.forEach((child) => {
        const position = {
          x: node.position.x + (Math.random() - 0.5) * 200,
          y: node.position.y + 100,
        };
        newNodes.push({
          id: child.id,
          type: child.data.type || 'default',
          data: { label: child.data.name || child.data.node },
          position,
          hidden: false,
          style: { backgroundColor: getNodeColor(child.data.type || 'default') },
        });

        newEdges.push({
          id: `${node.id}-${child.id}`,
          source: node.id,
          target: child.id,
          type: 'smoothstep',
          animated: false,
        });

        if (expandedNodes.has(child.id)) {
          expandNode(child);
        }
      });

      setNodes(newNodes);
      setEdges(newEdges);
    }
  }, [allNodes, nodes, edges, expandedNodes]);

  const onNodeClick: NodeMouseHandler<CustomNodeData> = useCallback((event, node) => {
    const currentExpandedNodes = new Set(expandedNodes);

    if (currentExpandedNodes.has(node.id)) {
      // Collapse the node
      currentExpandedNodes.delete(node.id);
      const nodesToKeep = nodes.filter(
        (n) =>
          !allNodes
            .filter((an) => an.data.parentNode === node.id)
            .some((child) => child.id === n.id)
      );
      const edgesToKeep = edges.filter(
        (e) =>
          !allNodes
            .filter((an) => an.data.parentNode === node.id)
            .some((child) => e.source === node.id && e.target === child.id)
      );
      setNodes(nodesToKeep);
      setEdges(edgesToKeep);
    } else {
      // Expand the node
      currentExpandedNodes.add(node.id);
      expandNode(node);
    }

    setExpandedNodes(currentExpandedNodes);
  }, [allNodes, nodes, edges, expandedNodes, expandNode]);

  const onConnect = useCallback(
    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  useEffect(() => {
    setNodes((nds) => getLayoutedNodes(nds, edges, direction));
  }, [edges, direction]);

  const handleParentNodeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedNodeId = e.target.value;
    setSelectedParentNode(selectedNodeId);
    const selectedNode = allNodes.find((node) => node.id === selectedNodeId);
    if (selectedNode) {
      setNodes([{ id: selectedNode.id, type: selectedNode.data.type || 'default', data: { label: selectedNode.data.name || selectedNode.data.node }, position: { x: 0, y: 0 }, style: { backgroundColor: getNodeColor(selectedNode.data.type || 'default') } }]);
      setEdges([]);
    }
  };

  // Get unique parent nodes for the dropdown
  const uniqueParentNodes = Array.from(new Set(allNodes.map((node) => node.data.parentNode))).filter(Boolean) as string[];

  return (
    <div style={graphContainerStyles}>
      <div style={navbarStyles}>
        <label style={controlsLabelStyles}>
          Direction:
          <select
            style={controlsSelectStyles}
            value={direction}
            onChange={(e) => setDirection(e.target.value)}
          >
            <option value="TB">Top-Bottom</option>
            <option value="BT">Bottom-Top</option>
            <option value="LR">Left-Right</option>
            <option value="RL">Right-Left</option>
          </select>
        </label>
        <label style={controlsLabelStyles}>
          Parent Node:
          <select
            style={controlsSelectStyles}
            value={selectedParentNode}
            onChange={handleParentNodeChange}
          >
            {uniqueParentNodes.map((nodeId) => {
              const node = allNodes.find((n) => n.id === nodeId);
              return node ? (
                <option key={node.id} value={node.id}>
                  {node.data.name || node.data.node}
                </option>
              ) : null;
            })}
          </select>
        </label>
      </div>
      <div style={reactflowWrapperStyles}>
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onNodeClick={onNodeClick}
          onConnect={onConnect}
          fitView
        >
          <MiniMap />
          <Controls />
          <Background />
        </ReactFlow>
      </div>
    </div>
  );
};

export default () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);






import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodesState,
  useEdgesState,
  ReactFlowProvider,
  Node,
  Edge,
  Connection,
  NodeMouseHandler,
} from 'reactflow';
import 'reactflow/dist/style.css';
import axios from 'axios';
import dagre from 'dagre';
import {
  graphContainerStyles,
  controlsLabelStyles,
  controlsSelectStyles,
  reactflowWrapperStyles,
  navbarStyles,
} from './styles'; // import the styles

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  name?: string;
  graphDepth: number;
  parentNode?: string | null;
}

interface TreeNode {
  id: string;
  data: NodeData;
  children: TreeNode[];
}

const initialNodes: Node[] = [];
const initialEdges: Edge[] = [];

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const getLayoutedNodes = (nodes: Node[], edges: Edge[], direction = 'TB') => {
  const nodeWidth = 172;
  const nodeHeight = 36;

  dagreGraph.setGraph({ rankdir: direction });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  return nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    return node;
  });
};

const getNodeColor = (type: string) => {
  switch (type) {
    case 'input':
      return '#FFD700'; // Gold
    case 'output':
      return '#FF6347'; // Tomato
    case 'option':
      return '#40E0D0'; // Turquoise
    default:
      return '#D3D3D3'; // Light Gray
  }
};

const App: React.FC = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState<Node>(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge>(initialEdges);
  const [allNodes, setAllNodes] = useState<TreeNode[]>([]);
  const [direction, setDirection] = useState('TB');
  const [selectedParentNode, setSelectedParentNode] = useState<string>('');
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());

  const fetchNodes = async (parentNodeId: string | null = null) => {
    try {
      const response = await axios.get<NodeData[]>(`https://api.example.com/nodes?parent=${parentNodeId}`);
      const data = response.data;

      const processedNodes: TreeNode[] = data.map((item) => ({
        id: item.node,
        data: item,
        children: [],
      }));

      setAllNodes((prevNodes) => {
        if (parentNodeId) {
          return insertNodes(prevNodes, parentNodeId, processedNodes);
        }
        return processedNodes;
      });

      // Set the first node (root node) as the initial node if no parent node is provided
      if (!parentNodeId && processedNodes.length > 0) {
        setNodes([{ id: processedNodes[0].id, type: processedNodes[0].data.type || 'default', data: { label: processedNodes[0].data.name || processedNodes[0].data.node }, position: { x: 0, y: 0 }, style: { backgroundColor: getNodeColor(processedNodes[0].data.type || 'default') } }]);
      }
    } catch (error) {
      console.error('Error fetching node data', error);
    }
  };

  useEffect(() => {
    fetchNodes();
  }, [setNodes]);

  const insertNodes = (nodes: TreeNode[], parentNodeId: string, newNodes: TreeNode[]): TreeNode[] => {
    return nodes.map((node) => {
      if (node.id === parentNodeId) {
        return { ...node, children: newNodes };
      } else {
        return { ...node, children: insertNodes(node.children, parentNodeId, newNodes) };
      }
    });
  };

  const generateEdges = useCallback((nodeId: string) => {
    const findNodeById = (nodes: TreeNode[], id: string): TreeNode | null => {
      for (const node of nodes) {
        if (node.id === id) return node;
        const found = findNodeById(node.children, id);
        if (found) return found;
      }
      return null;
    };

    const node = findNodeById(allNodes, nodeId);
    if (!node) return;

    const newEdges = node.children.map((child) => ({
      id: `e-${node.id}-${child.id}`,
      source: node.id,
      target: child.id,
    }));
    setEdges((prevEdges) => [...prevEdges, ...newEdges]);
  }, [allNodes, setEdges]);

  const expandNode = useCallback((node: Node) => {
    const findNodeById = (nodes: TreeNode[], id: string): TreeNode | null => {
      for (const node of nodes) {
        if (node.id === id) return node;
        const found = findNodeById(node.children, id);
        if (found) return found;
      }
      return null;
    };

    const treeNode = findNodeById(allNodes, node.id);
    if (!treeNode) return;

    if (treeNode.children.length === 0) {
      fetchNodes(treeNode.id);
      return;
    }

    const childNodes = treeNode.children;
    if (childNodes.length > 0) {
      const newNodes = [...nodes];
      const newEdges = [...edges];

      childNodes.forEach((child) => {
        const position = {
          x: node.position.x + (Math.random() - 0.5) * 200,
          y: node.position.y + 100,
        };
        newNodes.push({
          id: child.id,
          type: child.data.type || 'default',
          data: { label: child.data.name || child.data.node },
          position,
          hidden: false,
          style: { backgroundColor: getNodeColor(child.data.type || 'default') },
        });

        newEdges.push({
          id: `${node.id}-${child.id}`,
          source: node.id,
          target: child.id,
          type: 'smoothstep',
          animated: false,
        });

        if (expandedNodes.has(child.id)) {
          expandNode(child);
        }
      });

      setNodes(newNodes);
      setEdges(newEdges);
    }
  }, [allNodes, nodes, edges, expandedNodes]);

  const onNodeClick: NodeMouseHandler = useCallback((event, node) => {
    const currentExpandedNodes = new Set(expandedNodes);

    if (currentExpandedNodes.has(node.id)) {
      // Collapse the node
      currentExpandedNodes.delete(node.id);
      const nodesToKeep = nodes.filter(
        (n) =>
          !allNodes
            .filter((an) => an.data.parentNode === node.id)
            .some((child) => child.id === n.id)
      );
      const edgesToKeep = edges.filter(
        (e) =>
          !allNodes
            .filter((an) => an.data.parentNode === node.id)
            .some((child) => e.source === node.id && e.target === child.id)
      );
      setNodes(nodesToKeep);
      setEdges(edgesToKeep);
    } else {
      // Expand the node
      currentExpandedNodes.add(node.id);
      expandNode(node);
    }

    setExpandedNodes(currentExpandedNodes);
  }, [allNodes, nodes, edges, expandedNodes, expandNode]);

  const onConnect = useCallback(
    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  useEffect(() => {
    setNodes((nds) => getLayoutedNodes(nds, edges, direction));
  }, [edges, direction]);

  const handleParentNodeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedNodeId = e.target.value;
    setSelectedParentNode(selectedNodeId);
    const selectedNode = allNodes.find((node) => node.id === selectedNodeId);
    if (selectedNode) {
      setNodes([{ id: selectedNode.id, type: selectedNode.data.type || 'default', data: { label: selectedNode.data.name || selectedNode.data.node }, position: { x: 0, y: 0 }, style: { backgroundColor: getNodeColor(selectedNode.data.type || 'default') } }]);
      setEdges([]);
    }
  };

  // Get unique parent nodes for the dropdown
  const uniqueParentNodes = Array.from(new Set(allNodes.map((node) => node.data.parentNode))).filter(Boolean) as string[];

  return (
    <div style={graphContainerStyles}>
      <div style={navbarStyles}>
        <label style={controlsLabelStyles}>
          Direction:
          <select
            style={controlsSelectStyles}
            value={direction}
            onChange={(e) => setDirection(e.target.value)}
          >
            <option value="TB">Top-Bottom</option>
            <option value="BT">Bottom-Top</option>
            <option value="LR">Left-Right</option>
            <option value="RL">Right-Left</option>
          </select>
        </label>
        <label style={controlsLabelStyles}>
          Parent Node:
          <select
            style={controlsSelectStyles}
            value={selectedParentNode}
            onChange={handleParentNodeChange}
          >
            {uniqueParentNodes.map((nodeId) => {
              const node = allNodes.find((n) => n.id === nodeId);
              return node ? (
                <option key={node.id} value={node.id}>
                  {node.data.name || node.data.node}
                </option>
              ) : null;
            })}
          </select>
        </label>
      </div>
      <div style={reactflowWrapperStyles}>
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onNodeClick={onNodeClick}
          onConnect={onConnect}
          fitView
        >
          <Controls />
          <MiniMap />
          <Background variant="dots" gap={12} size={1} />
        </ReactFlow>
      </div>
    </div>
  );
};

const WrappedApp: React.FC = () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);

export default WrappedApp;
