import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  removeElements,
  ReactFlowProvider,
  Node,
  Edge,
  Connection,
  NodeMouseEvent,
} from 'react-flow-renderer';
import 'react-flow-renderer/dist/style.css';

import axios from 'axios';
import dagre from 'dagre';
import {
  graphContainerStyles,
  controlsLabelStyles,
  controlsSelectStyles,
  reactflowWrapperStyles,
  navbarStyles,
} from './styles';  // Import your styles

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  graphDepth: number;
  parentNode?: string | null;
}

const initialNodes: Node[] = [];
const initialEdges: Edge[] = [];

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const getNodeColor = (type: string) => {
  switch (type) {
    case 'input':
      return '#FFD700'; // Gold
    case 'output':
      return '#FF6347'; // Tomato
    case 'option':
      return '#40E0D0'; // Turquoise
    default:
      return '#D3D3D3'; // Light Gray
  }
};

const App: React.FC = () => {
  const [nodes, setNodes] = useState<Node[]>(initialNodes);
  const [edges, setEdges] = useState<Edge[]>(initialEdges);
  const [allNodes, setAllNodes] = useState<Node[]>([]);
  const [direction, setDirection] = useState('TB');
  const [selectedParentNode, setSelectedParentNode] = useState<string>('');

  useEffect(() => {
    const fetchNodes = async () => {
      try {
        const response = await axios.get<NodeData[]>('https://api.example.com/nodes');
        const data = response.data;
        const processedNodes: Node[] = data.map((item) => ({
          id: item.node,
          type: item.type || 'default',
          data: {
            label: item.node,
            value: item.value,
            graphdepth: item.graphDepth,
            parentNode: item.parentNode,
          },
          position: { x: 0, y: 0 },
          draggable: true,
          style: { backgroundColor: getNodeColor(item.type || 'default') },
        }));

        const processedEdges: Edge[] = data
          .filter((item) => item.parentNode)
          .map((item) => ({
            id: `e-${item.parentNode}-${item.node}`,
            source: item.parentNode as string,
            target: item.node,
          }));

        setAllNodes(processedNodes);
        setNodes(processedNodes.filter(node => !node.data.parentNode)); // Set initial nodes to root nodes

        setEdges(processedEdges);
      } catch (error) {
        console.error('Error fetching node data', error);
      }
    };

    fetchNodes();
  }, []);

  const generateEdges = useCallback((nodeId: string) => {
    const newEdges = allNodes
      .filter(node => node.data.parentNode === nodeId)
      .map(node => ({
        id: `e-${node.data.parentNode}-${node.id}`,
        source: node.data.parentNode as string,
        target: node.id,
      }));
    setEdges(prevEdges => [...prevEdges, ...newEdges]);
  }, [allNodes]);

  const onNodeClick = useCallback((event: NodeMouseEvent) => {
    const clickedNode = event.target;
    const childNodes = allNodes.filter(n => n.data.parentNode === clickedNode.id);
    if (childNodes.length > 0) {
      const hiddenNodes = childNodes.filter(n => n.isHidden);
      if (hiddenNodes.length > 0) {
        hiddenNodes.forEach(child => {
          child.isHidden = false;
        });
        setNodes(prevNodes => {
          const updatedNodes = [...prevNodes, ...hiddenNodes];
          return updatedNodes;
        });
        generateEdges(clickedNode.id);
      } else {
        setNodes(prevNodes => {
          const updatedNodes = prevNodes.map(n =>
            childNodes.some(child => child.id === n.id)
              ? { ...n, isHidden: true }
              : n
          );
          const remainingEdges = edges.filter(
            edge => !childNodes.some(child => edge.target === child.id)
          );
          setEdges(remainingEdges);
          return updatedNodes;
        });
      }
    }
  }, [allNodes, edges, generateEdges]);

  const handleParentNodeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedNodeId = e.target.value;
    setSelectedParentNode(selectedNodeId);
    const selectedNode = allNodes.find(node => node.id === selectedNodeId);
    if (selectedNode) {
      setNodes([{ ...selectedNode, isHidden: false }]);
      setEdges([]);
    }
  };

  return (
    <div style={graphContainerStyles}>
      <div style={navbarStyles}>
        <label style={controlsLabelStyles}>
          Direction:
          <select style={controlsSelectStyles} value={direction} onChange={(e) => setDirection(e.target.value)}>
            <option value="TB">Top-Bottom</option>
            <option value="BT">Bottom-Top</option>
            <option value="LR">Left-Right</option>
            <option value="RL">Right-Left</option>
          </select>
        </label>
        <label style={controlsLabelStyles}>
          Parent Node:
          <select style={controlsSelectStyles} value={selectedParentNode} onChange={handleParentNodeChange}>
            {allNodes.map(node => (
              <option key={node.id} value={node.id}>
                {node.data.label}
              </option>
            ))}
          </select>
        </label>
      </div>
      <div style={reactflowWrapperStyles}>
        <ReactFlow
          elements={nodes.concat(edges)}
          onElementsRemove={elements => setEdges(prevEdges => removeElements(elements, prevEdges))}
          onConnect={(params) => setEdges((prevEdges) => addEdge(params, prevEdges))}
          onElementClick={onNodeClick}
          onLoad={instance => {
            instance.fitView();
          }}
        >
          <Controls />
          <MiniMap />
          <Background />
        </ReactFlow>
      </div>
    </div>
  );
};

const WrappedApp: React.FC = () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);

export default WrappedApp;
