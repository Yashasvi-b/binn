import React, { useState, useEffect, useCallback } from "react";
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodesState,
  useEdgesState,
  ReactFlowProvider,
  Node,
  Edge,
  Connection,
  NodeMouseHandler,
  useReactFlow,
} from "reactflow";
import "reactflow/dist/style.css";
import axios from "axios";
import dagre from "dagre";
import {
  graphContainerStyles,
  controlsStyles,
  controlsLabelStyles,
  controlsSelectStyles,
} from "./styles";

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  graphDepth: number;
  parentNode?: string | null;
}

const nodeWidth = 172;
const nodeHeight = 36;

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const getLayoutedNodes = (nodes: Node[], edges: Edge[], direction = "TB") => {
  const isHorizontal = direction === "LR" || direction === "RL";
  dagreGraph.setGraph({ rankdir: direction });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  return nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    (node as any).targetPosition = isHorizontal ? "left" : "top";
    (node as any).sourcePosition = isHorizontal ? "right" : "bottom";
    return node;
  });
};

const getNodeColor = (nodeId: string, allNodes: Node[]) => {
  const hasChildren = allNodes.some((node) => node.data.parentNode === nodeId);
  return hasChildren ? "#D3D3D3" : "#00FF00"; // Light Gray for non-leaf, Green for leaf nodes
};

const App: React.FC = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState<Node>([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge[]>([]);
  const [allNodes, setAllNodes] = useState<Node[]>([]);
  const [allEdges, setAllEdges] = useState<Edge[]>([]);
  const [expandedNodes, setExpandedNodes] = useState<string[]>([]);
  const [direction, setDirection] = useState("TB");
  const [selectedParentNode, setSelectedParentNode] = useState<string | null>(
    null
  );

  const { project } = useReactFlow();

  useEffect(() => {
    const fetchNodes = async () => {
      try {
        const response = await axios.get<NodeData[]>("https://api.example.com/nodes");
        const data = response.data;
        const processedNodes: Node[] = data.map((item) => ({
          id: item.node,
          type: item.type || "default",
          data: {
            label: item.node,
            value: item.value,
            graphDepth: item.graphDepth,
            parentNode: item.parentNode,
          },
          position: { x: 0, y: 0 },
          draggable: true,
          hidden: true,
        }));

        const processedEdges: Edge[] = data
          .filter((item) => item.parentNode)
          .map((item) => ({
            id: `e-${item.parentNode}-${item.node}`,
            source: item.parentNode as string,
            target: item.node,
          }));

        setAllNodes(processedNodes);
        setAllEdges(processedEdges);

        if (processedNodes.length > 0) {
          setNodes([{ ...processedNodes[0], hidden: false }]);
          setSelectedParentNode(processedNodes[0].id);
        }
      } catch (error) {
        console.error("Error fetching node data", error);
      }
    };

    fetchNodes();
  }, [setNodes]);

  const generateEdges = useCallback(
    (nodeId: string) => {
      const newEdges = allNodes
        .filter((node) => node.data.parentNode === nodeId)
        .map((node) => ({
          id: `e-${node.data.parentNode}-${node.id}`,
          source: node.data.parentNode as string,
          target: node.id,
        }));
      setEdges((prevEdges) => [...prevEdges, ...newEdges]);
    },
    [allNodes, setEdges]
  );

  const expandNode = useCallback(
    (node: Node) => {
      const currentExpandedNodes = new Set(expandedNodes);

      if (currentExpandedNodes.has(node.id)) {
        currentExpandedNodes.delete(node.id);
        const nodesToKeep = nodes.filter(
          (n) => !allNodes.some((child) => child.data.parentNode === node.id && child.id === n.id)
        );
        const edgesToKeep = edges.filter(
          (e) => !allNodes.some((child) => child.data.parentNode === node.id && e.source === node.id && e.target === child.id)
        );
        setNodes(nodesToKeep);
        setEdges(edgesToKeep);
      } else {
        currentExpandedNodes.add(node.id);
        const childNodes = allNodes.filter((n) => n.data.parentNode === node.id && n.hidden);
        if (childNodes.length > 0) {
          childNodes.forEach((child) => {
            child.hidden = false;
            child.style = { backgroundColor: getNodeColor(child.id, allNodes) };
          });
          setNodes((prevNodes) => {
            const updatedNodes = [...prevNodes, ...childNodes];
            return getLayoutedNodes(updatedNodes, edges, direction);
          });
          generateEdges(node.id);
        }
      }
      setExpandedNodes(Array.from(currentExpandedNodes));
    },
    [allNodes, edges, expandedNodes, nodes, direction, generateEdges]
  );

  useEffect(() => {
    const layoutedElements = getLayoutedNodes(nodes, edges, direction);
    setNodes(layoutedElements);
    setEdges(layoutedElements.map((n) => n as Edge));
  }, [nodes.length, edges.length, direction]);

  useEffect(() => {
    if (selectedParentNode) {
      const selectedNode = allNodes.find((n) => n.id === selectedParentNode);
      if (selectedNode) {
        setNodes([{ ...selectedNode, hidden: false, style: { backgroundColor: getNodeColor(selectedNode.id, allNodes) } }]);
        setEdges([]);
        setExpandedNodes([]);
      }
    }
  }, [selectedParentNode, allNodes]);

  return (
    <div style={graphContainerStyles}>
      <div style={controlsStyles}>
        <label style={controlsLabelStyles}>
          Direction:
          <select
            value={direction}
            onChange={(e) => setDirection(e.target.value)}
            style={controlsSelectStyles}
          >
            <option value="TB">Top-Bottom</option>
            <option value="BT">Bottom-Top</option>
            <option value="LR">Left-Right</option>
            <option value="RL">Right-Left</option>
          </select>
        </label>
        <label style={{ ...controlsLabelStyles, marginLeft: "20px" }}>
          Parent Node:
          <select
            value={selectedParentNode || ""}
            onChange={(e) => setSelectedParentNode(e.target.value)}
            style={controlsSelectStyles}
          >
            {allNodes.map((node) => (
              <option key={node.id} value={node.id}>
                {node.data.label}
              </option>
            ))}
          </select>
        </label>
      </div>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        fitView
        onNodeClick={(event, node) => expandNode(node)}
      >
        <MiniMap />
        <Controls />
        <Background />
      </ReactFlow>
    </div>
  );
};

const WrappedApp: React.FC = () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);

export default WrappedApp;
