const App: React.FC = () => {
  // Existing code...

  return (
    <div style={{ display: 'flex', height: '100vh' }}>
      {/* Sidebar */}
      <div style={{ width: '20%', background: '#f0f0f0', padding: '10px', boxSizing: 'border-box' }}>
        <div style={navbarStyles}>
          <label style={controlsLabelStyles}>
            Direction:
            <select
              style={controlsSelectStyles}
              value={direction}
              onChange={(e) => setDirection(e.target.value)}
            >
              <option value="TB">Top-Bottom</option>
              <option value="BT">Bottom-Top</option>
              <option value="LR">Left-Right</option>
              <option value="RL">Right-Left</option>
            </select>
          </label>
          <label style={controlsLabelStyles}>
            Parent Node:
            <select
              style={controlsSelectStyles}
              value={selectedParentNode}
              onChange={handleParentNodeChange}
            >
              {uniqueParentNodes.map((nodeId) => {
                const node = allNodes.find((n) => n.id === nodeId);
                return node ? (
                  <option key={node.id} value={node.id}>
                    {node.data.label}
                  </option>
                ) : null;
              })}
            </select>
          </label>
        </div>
      </div>

      {/* Main content area */}
      <div style={{ flex: 1 }}>
        <div style={graphContainerStyles}>
          <div style={reactflowWrapperStyles}>
            <ReactFlow
              nodes={nodes}
              edges={edges}
              onNodesChange={onNodesChange}
              onEdgesChange={onEdgesChange}
              onNodeClick={onNodeClick}
              onConnect={onConnect}
              deleteKeyCode={46} /* enable delete key for node removal */
              onLoad={setReactFlowInstance}
            >
              <MiniMap
                nodeStrokeColor={(n) => {
                  if (n.style?.background) return n.style.background as string;
                  if (n.type === 'input') return '#0041d0';
                  if (n.type === 'output') return '#ff0072';
                  if (n.type === 'default') return '#1a192b';

                  return '#eee';
                }}
                nodeColor={(n) => {
                  if (n.style?.background) return n.style.background as string;

                  return '#fff';
                }}
                nodeBorderRadius={2}
              />
              <Controls />
              <Background />
            </ReactFlow>
          </div>
        </div>
      </div>
    </div>
  );
};
