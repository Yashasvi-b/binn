const App: React.FC = () => {
  // Existing state and useEffects...

  return (
    <div style={{ display: 'flex', height: '100vh' }}>
      {/* Sidebar */}
      <div style={{ width: panelOpen ? '20%' : '0', minWidth: '200px', background: '#f0f0f0', padding: '10px', boxSizing: 'border-box', overflowX: 'hidden', transition: 'width 0.3s ease' }}>
        {panelOpen && (
          <div style={navbarStyles}>
            <label style={controlsLabelStyles}>
              Direction:
              <select
                style={controlsSelectStyles}
                value={direction}
                onChange={(e) => setDirection(e.target.value)}
              >
                <option value="TB">Top-Bottom</option>
                <option value="BT">Bottom-Top</option>
                <option value="LR">Left-Right</option>
                <option value="RL">Right-Left</option>
              </select>
            </label>
            <label style={controlsLabelStyles}>
              Parent Node:
              <select
                style={controlsSelectStyles}
                value={selectedParentNode}
                onChange={handleParentNodeChange}
              >
                {uniqueParentNodes.map((nodeId) => {
                  const node = allNodes.find((n) => n.id === nodeId);
                  return node ? (
                    <option key={node.id} value={node.id}>
                      {node.data.label}
                    </option>
                  ) : null;
                })}
              </select>
            </label>
          </div>
        )}
        <button onClick={() => setPanelOpen(!panelOpen)} style={{ position: 'absolute', top: '10px', right: '10px' }}>
          {panelOpen ? 'Close Panel' : 'Open Panel'}
        </button>
      </div>

      {/* Main content area */}
      <div style={{ flex: 1, position: 'relative' }}>
        <div style={graphContainerStyles}>
          <div style={reactflowWrapperStyles}>
            <ReactFlow
              elements={{ nodes, edges }}
              onLoad={onLoad}
              onElementClick={onElementClick}
              onConnect={onConnect}
              onElementsRemove={onElementsRemove}
              onNodeDragStop={onNodeDragStop}
              onNodeDoubleClick={onNodeDoubleClick}
              deleteKeyCode={46} /* enable delete key for node removal */
              connectionLineStyle={connectionLineStyle}
              nodeTypes={nodeTypes}
              nodesDraggable={true}
              nodesConnectable={true}
              elementsSelectable={true}
            >
              <MiniMap
                nodeStrokeColor={(n) => {
                  if (n.style?.background) return n.style.background as string;
                  if (n.type === 'input') return '#0041d0';
                  if (n.type === 'output') return '#ff0072';
                  if (n.type === 'default') return '#1a192b';

                  return '#eee';
                }}
                nodeColor={(n) => {
                  if (n.style?.background) return n.style.background as string;

                  return '#fff';
                }}
                nodeBorderRadius={2}
              />
              <Controls />
              <Background />
            </ReactFlow>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;
