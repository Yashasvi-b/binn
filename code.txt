// styles.ts
export const nodeStyles = (isLeaf: boolean): React.CSSProperties => ({
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  backgroundColor: isLeaf ? '#00FF00' : '#D3D3D3', // Green for leaf nodes
  padding: '10px',
  borderRadius: '5px',
  border: '1px solid #ccc',
});

export const buttonStyles: React.CSSProperties = {
  margin: '2px',
};

export const graphContainerStyles: React.CSSProperties = {
  width: '100vw',
  height: '100vh',
};

//styles.ts

import React from 'react';
import { Handle, Position, NodeProps } from 'reactflow';
import { nodeStyles, buttonStyles } from './styles';

const CustomNode: React.FC<NodeProps> = ({ data, isConnectable }) => {
  return (
    <div style={nodeStyles(data.isLeaf)}>
      <div>
        <button style={buttonStyles} onClick={data.onExpand}>+</button>
        <button style={buttonStyles} onClick={data.onCollapse}>-</button>
      </div>
      <div>{data.label}</div>
      <Handle type="target" position={Position.Top} isConnectable={isConnectable} />
      <Handle type="source" position={Position.Bottom} isConnectable={isConnectable} />
    </div>
  );
};

export default CustomNode;

//customNode


import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  useNodesState,
  useEdgesState,
  ReactFlowProvider,
  Node,
  Edge,
  Connection,
} from 'reactflow';
import 'reactflow/dist/style.css';
import axios from 'axios';
import dagre from 'dagre';
import CustomNode from './CustomNode';
import { graphContainerStyles } from './styles';

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  graphDepth: number;
  parentNode?: string | null;
}

const initialNodes: Node[] = [];
const initialEdges: Edge[] = [];

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const getLayoutedNodes = (nodes: Node[], edges: Edge[]) => {
  const nodeWidth = 172;
  const nodeHeight = 36;

  dagreGraph.setGraph({ rankdir: 'TB' });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  return nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    return node;
  });
};

const App: React.FC = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState<Node>(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdgesState<Edge>(initialEdges);
  const [allNodes, setAllNodes] = useState<Node[]>([]);
  const [allEdges, setAllEdges] = useState<Edge[]>([]);

  useEffect(() => {
    const fetchNodes = async () => {
      try {
        const response = await axios.get<NodeData[]>('https://api.example.com/nodes');
        const data = response.data;
        const processedNodes: Node[] = data.map((item) => ({
          id: item.node,
          type: 'custom', // use custom node type
          data: {
            label: item.node,
            value: item.value,
            graphDepth: item.graphDepth,
            parentNode: item.parentNode,
            onExpand: () => handleExpand(item.node),
            onCollapse: () => handleCollapse(item.node),
            isLeaf: !data.some((d) => d.parentNode === item.node),
          },
          position: { x: 0, y: 0 },
          draggable: true,
          hidden: true,
        }));

        const processedEdges: Edge[] = data
          .filter((item) => item.parentNode)
          .map((item) => ({
            id: `e-${item.parentNode}-${item.node}`,
            source: item.parentNode as string,
            target: item.node,
          }));

        setAllNodes(processedNodes);
        setAllEdges(processedEdges);

        // Set the first node (root node) as the initial node
        if (processedNodes.length > 0) {
          setNodes([{ ...processedNodes[0], hidden: false }]);
        }
      } catch (error) {
        console.error('Error fetching node data', error);
      }
    };

    fetchNodes();
  }, [setNodes]);

  const handleExpand = (nodeId: string) => {
    const childNodes = allNodes.filter((n) => n.data.parentNode === nodeId && n.hidden);
    if (childNodes.length > 0) {
      childNodes.forEach((child) => {
        child.hidden = false;
      });
      setNodes((prevNodes) => {
        const updatedNodes = [...prevNodes, ...childNodes];
        return getLayoutedNodes(updatedNodes, edges);
      });
      generateEdges(nodeId);
    }
  };

  const handleCollapse = (nodeId: string) => {
    const childNodes = allNodes.filter((n) => n.data.parentNode === nodeId && !n.hidden);
    if (childNodes.length > 0) {
      childNodes.forEach((child) => {
        child.hidden = true;
      });
      setNodes((prevNodes) => {
        const updatedNodes = prevNodes.filter((n) => n.id !== nodeId);
        return getLayoutedNodes(updatedNodes, edges);
      });
      removeEdges(nodeId);
    }
  };

  const generateEdges = useCallback((nodeId: string) => {
    const newEdges = allNodes
      .filter((node) => node.data.parentNode === nodeId)
      .map((node) => ({
        id: `e-${node.data.parentNode}-${node.id}`,
        source: node.data.parentNode as string,
        target: node.id,
      }));
    setEdges((prevEdges) => [...prevEdges, ...newEdges]);
  }, [allNodes, setEdges]);

  const removeEdges = (nodeId: string) => {
    const newEdges = edges.filter((edge) => edge.source !== nodeId && edge.target !== nodeId);
    setEdges(newEdges);
  };

  const onConnect = useCallback(
    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  useEffect(() => {
    setNodes((nds) => getLayoutedNodes(nds, edges));
  }, [edges]);

  return (
    <div style={graphContainerStyles}>
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        nodeTypes={{ custom: CustomNode }}
        fitView
      >
        <Controls />
        <MiniMap />
        <Background variant="dots" gap={12} size={1} />
      </ReactFlow>
    </div>
  );
};

const WrappedApp: React.FC = () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);

export default WrappedApp;

//app.tsx
