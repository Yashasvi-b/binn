import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodes,
  useEdges,
  Node,
  Edge,
  Connection,
  NodeMouseEventHandler,
} from 'react-flow-renderer';
import 'react-flow-renderer/dist/style.css';
import axios from 'axios';
import dagre from 'dagre';

import {
  graphContainerStyles,
  controlsLabelStyles,
  controlsSelectStyles,
  reactflowWrapperStyles,
  navbarStyles,
} from './styles'; // Import your styles here

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  graphDepth: number;
  parentNode?: string | null;
}

const initialNodes: Node[] = [];
const initialEdges: Edge[] = [];

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const getLayoutedNodes = (nodes: Node[], edges: Edge[], direction = 'TB') => {
  const nodeWidth = 172;
  const nodeHeight = 36;

  dagreGraph.setGraph({ rankdir: direction });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  return nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    return node;
  });
};

const getNodeColor = (type: string) => {
  switch (type) {
    case 'input':
      return '#FFD700'; // Gold
    case 'output':
      return '#FF6347'; // Tomato
    case 'option':
      return '#40E0D0'; // Turquoise
    default:
      return '#D3D3D3'; // Light Gray
  }
};

const App: React.FC = () => {
  const [nodes, setNodes] = useNodes(initialNodes);
  const [edges, setEdges] = useEdges(initialEdges);
  const [allNodes, setAllNodes] = useState<Node[]>([]);
  const [allEdges, setAllEdges] = useState<Edge[]>([]);
  const [direction, setDirection] = useState('TB');
  const [selectedParentNode, setSelectedParentNode] = useState<string>('');
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());
  const [panelOpen, setPanelOpen] = useState(true); // State to track if panel is open or closed

  useEffect(() => {
    const fetchNodes = async () => {
      try {
        const response = await axios.get<NodeData[]>('https://api.example.com/nodes');
        const data = response.data;
        const processedNodes: Node[] = data.map((item) => ({
          id: item.node,
          type: item.type || 'default',
          data: {
            label: item.node,
            value: item.value,
            graphdepth: item.graphDepth,
            parentNode: item.parentNode,
            backgroundColor: getNodeColor(item.type || 'default')
          },
          position: { x: 0, y: 0 },
          draggable: true,
          hidden: true,
        }));

        const processedEdges: Edge[] = data
          .filter((item) => item.parentNode)
          .map((item) => ({
            id: `e-${item.parentNode}-${item.node}`,
            source: item.parentNode as string,
            target: item.node,
          }));

        setAllNodes(processedNodes);
        setAllEdges(processedEdges);

        // Set the first node (root node) as the initial node
        if (processedNodes.length > 0) {
          setNodes([{ ...processedNodes[0], hidden: false }]);
        }
      } catch (error) {
        console.error('Error fetching node data', error);
      }
    };

    fetchNodes();
  }, [setNodes]);

  const generateEdges = useCallback((nodeId: string) => {
    const newEdges = allNodes
      .filter((node) => node.data.parentNode === nodeId)
      .map((node) => ({
        id: `e-${node.data.parentNode}-${node.id}`,
        source: node.data.parentNode as string,
        target: node.id,
      }));
    setEdges((prevEdges) => [...prevEdges, ...newEdges]);
  }, [allNodes, setEdges]);

  const expandNode = useCallback((node: Node) => {
    const childNodes = allNodes.filter((n) => n.data.parentNode === node.id);
    if (childNodes.length > 0) {
      const newNodes = [...nodes];
      const newEdges = [...edges];

      childNodes.forEach((child) => {
        const position = {
          x: node.position.x + (Math.random() - 0.5) * 200,
          y: node.position.y + 100,
        };
        newNodes.push({
          ...child,
          position,
          hidden: false,
          data: {
            ...child.data,
            backgroundColor: getNodeColor(child.data.type || 'default')
          }
        });

        newEdges.push({
          id: `${node.id}-${child.id}`,
          source: node.id,
          target: child.id,
          type: 'smoothstep',
          animated: false,
        });

        if (expandedNodes.has(child.id)) {
          expandNode(child);
        }
      });

      setNodes(newNodes);
      setEdges(newEdges);
    }
  }, [allNodes, nodes, edges, expandedNodes]);

  const onNodeClick: NodeMouseEventHandler = useCallback((event, node) => {
    const currentExpandedNodes = new Set(expandedNodes);

    if (currentExpandedNodes.has(node.id)) {
      // Collapse the node
      currentExpandedNodes.delete(node.id);
      const nodesToKeep = nodes.filter(
        (n) => !allNodes.some(
          (an) => an.data.parentNode === node.id && an.id === n.id
        )
      );
      const edgesToKeep = edges.filter(
        (e) => !allNodes.some(
          (an) => an.data.parentNode === node.id && e.source === node.id && e.target === an.id
        )
      );
      setNodes(nodesToKeep);
      setEdges(edgesToKeep);
    } else {
      // Expand the node
      currentExpandedNodes.add(node.id);
      expandNode(node);
    }

    setExpandedNodes(currentExpandedNodes);
  }, [allNodes, nodes, edges, expandedNodes, expandNode]);

  const onConnect = useCallback(
    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  useEffect(() => {
    setNodes((nds) => getLayoutedNodes(nds, edges, direction));
  }, [edges, direction]);

  const handleParentNodeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedNodeId = e.target.value;
    setSelectedParentNode(selectedNodeId);
    const selectedNode = allNodes.find((node) => node.id === selectedNodeId);
    if (selectedNode) {
      setNodes([{ ...selectedNode, hidden: false }]);
      setEdges([]);
    }
  };

  // Get unique parent nodes for the dropdown
  const uniqueParentNodes = Array.from(new Set(allNodes.map((node) => node.data.parentNode))).filter(Boolean) as string[];

  return (
    <div style={{ display: 'flex', height: '100vh' }}>
      {/* Sidebar */}
      <div style={{ width: panelOpen ? '20%' : '0', minWidth: '200px', background: '#f0f0f0', padding: '10px', boxSizing: 'border-box', overflowX: 'hidden', transition: 'width 0.3s ease' }}>
        {panelOpen && (
          <div style={navbarStyles}>
            <label style={controlsLabelStyles}>
              Direction:
              <select
                style={controlsSelectStyles}
                value={direction}
                onChange={(e) => setDirection(e.target.value)}
              >
                <option value="TB">Top-Bottom</option>
                <option value="BT">Bottom-Top</option>
                <option value="LR">Left-Right</option>
                <option value="RL">Right-Left</option>
              </select>
            </label>
            <label style={controlsLabelStyles}>
              Parent Node:
              <select
                style={controlsSelectStyles}
                value={selectedParentNode}
                onChange={handleParentNodeChange}
              >
                {uniqueParentNodes.map((nodeId) => {
                  const node = allNodes.find((n) => n.id === nodeId);
                  return node ? (
                    <option key={node.id} value={node.id}>
                      {node.data.label}
                    </option>
                  ) : null;
                })}
              </select>
            </label>
          </div>
        )}
        <button onClick={() => setPanelOpen(!panelOpen)} style={{ position: 'absolute', top: '10px', right: '10px' }}>
          {panelOpen ? 'Close Panel' : '


const App: React.FC = () => {
  // Existing state and useEffects...

  return (
    <div style={{ display: 'flex', height: '100vh' }}>
      {/* Sidebar */}
      <div style={{ width: panelOpen ? '20%' : '0', minWidth: '200px', background: '#f0f0f0', padding: '10px', boxSizing: 'border-box', overflowX: 'hidden', transition: 'width 0.3s ease' }}>
        {panelOpen && (
          <div style={navbarStyles}>
            <label style={controlsLabelStyles}>
              Direction:
              <select
                style={controlsSelectStyles}
                value={direction}
                onChange={(e) => setDirection(e.target.value)}
              >
                <option value="TB">Top-Bottom</option>
                <option value="BT">Bottom-Top</option>
                <option value="LR">Left-Right</option>
                <option value="RL">Right-Left</option>
              </select>
            </label>
            <label style={controlsLabelStyles}>
              Parent Node:
              <select
                style={controlsSelectStyles}
                value={selectedParentNode}
                onChange={handleParentNodeChange}
              >
                {uniqueParentNodes.map((nodeId) => {
                  const node = allNodes.find((n) => n.id === nodeId);
                  return node ? (
                    <option key={node.id} value={node.id}>
                      {node.data.label}
                    </option>
                  ) : null;
                })}
              </select>
            </label>
          </div>
        )}
        <button onClick={() => setPanelOpen(!panelOpen)} style={{ position: 'absolute', top: '10px', right: '10px' }}>
          {panelOpen ? 'Close Panel' : 'Open Panel'}
        </button>
      </div>

      {/* Main content area */}
      <div style={{ flex: 1, position: 'relative' }}>
        <div style={graphContainerStyles}>
          <div style={reactflowWrapperStyles}>
            <ReactFlow
              elements={{ nodes, edges }}
              onLoad={onLoad}
              onElementClick={onElementClick}
              onConnect={onConnect}
              onElementsRemove={onElementsRemove}
              onNodeDragStop={onNodeDragStop}
              onNodeDoubleClick={onNodeDoubleClick}
              deleteKeyCode={46} /* enable delete key for node removal */
              connectionLineStyle={connectionLineStyle}
              nodeTypes={nodeTypes}
              nodesDraggable={true}
              nodesConnectable={true}
              elementsSelectable={true}
            >
              <MiniMap
                nodeStrokeColor={(n) => {
                  if (n.style?.background) return n.style.background as string;
                  if (n.type === 'input') return '#0041d0';
                  if (n.type === 'output') return '#ff0072';
                  if (n.type === 'default') return '#1a192b';

                  return '#eee';
                }}
                nodeColor={(n) => {
                  if (n.style?.background) return n.style.background as string;

                  return '#fff';
                }}
                nodeBorderRadius={2}
              />
              <Controls />
              <Background />
            </ReactFlow>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;
