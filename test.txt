import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import App from './App';

const mock = new MockAdapter(axios);

const mockData = [
  {
    node: 'root',
    type: 'input',
    value: 'Root Node',
    name: 'Root',
    graphDepth: 0,
    parentNode: null,
  },
  {
    node: 'child1',
    type: 'default',
    value: 'Child Node 1',
    name: 'Child 1',
    graphDepth: 1,
    parentNode: 'root',
  },
];

describe('API Fetching', () => {
  beforeEach(() => {
    mock.reset();
  });

  test('fetches and displays root node', async () => {
    mock.onGet('https://api.example.com/nodes?parent=null').reply(200, mockData);

    render(<App />);

    await waitFor(() => {
      expect(screen.getByText('Root')).toBeInTheDocument();
    });

    expect(screen.getByText('Root')).toBeVisible();
  });
});






pooooooooooooooooooooo






import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { act } from 'react-dom/test-utils';
import rewiremock from 'rewiremock';
import axios from 'axios';

rewiremock('axios').with({
  get: jest.fn(),
});

rewiremock.enable();
const WrappedApp = require('./App').default;
rewiremock.disable();

const mockNodesData = [
  { node: '1', graphDepth: 0 },
  { node: '2', graphDepth: 1, parentNode: '1' },
  { node: '3', graphDepth: 1, parentNode: '1' },
  { node: '4', graphDepth: 2, parentNode: '2' },
];

describe('App Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders without crashing', async () => {
    axios.get.mockResolvedValueOnce({ data: mockNodesData });

    await act(async () => {
      render(<WrappedApp />);
    });

    expect(screen.getByLabelText('Direction:')).toBeInTheDocument();
    expect(screen.getByLabelText('Parent Node:')).toBeInTheDocument();
  });

  test('fetches and displays nodes correctly', async () => {
    axios.get.mockResolvedValueOnce({ data: mockNodesData });

    await act(async () => {
      render(<WrappedApp />);
    });

    await waitFor(() => expect(axios.get).toHaveBeenCalledTimes(1));
    expect(screen.getByText('1')).toBeInTheDocument();
  });

  test('expands and collapses nodes on click', async () => {
    axios.get.mockResolvedValueOnce({ data: mockNodesData });

    await act(async () => {
      render(<WrappedApp />);
    });

    await waitFor(() => expect(axios.get).toHaveBeenCalledTimes(1));

    const node1 = screen.getByText('1');
    fireEvent.click(node1);

    await waitFor(() => expect(screen.getByText('2')).toBeInTheDocument());
    expect(screen.getByText('3')).toBeInTheDocument();

    fireEvent.click(node1);
    await waitFor(() => expect(screen.queryByText('2')).toBeNull());
    expect(screen.queryByText('3')).toBeNull();
  });

  test('changes direction', async () => {
    axios.get.mockResolvedValueOnce({ data: mockNodesData });

    await act(async () => {
      render(<WrappedApp />);
    });

    await waitFor(() => expect(axios.get).toHaveBeenCalledTimes(1));

    const directionSelect = screen.getByLabelText('Direction:');
    fireEvent.change(directionSelect, { target: { value: 'BT' } });

    expect(directionSelect.value).toBe('BT');
  });

  test('changes parent node', async () => {
    axios.get.mockResolvedValueOnce({ data: mockNodesData });

    await act(async () => {
      render(<WrappedApp />);
    });

    await waitFor(() => expect(axios.get).toHaveBeenCalledTimes(1));

    const parentNodeSelect = screen.getByLabelText('Parent Node:');
    fireEvent.change(parentNodeSelect, { target: { value: '1' } });

    expect(parentNodeSelect.value).toBe('1');
  });

  test('adds edges on connect', async () => {
    axios.get.mockResolvedValueOnce({ data: mockNodesData });

    await act(async () => {
      render(<WrappedApp />);
    });

    await waitFor(() => expect(axios.get).toHaveBeenCalledTimes(1));

    // Since ReactFlow's onConnect is an external library method,
    // we will mock and simulate an edge addition
    const onConnect = screen.queryByText('onConnect');
    fireEvent.connect(onConnect, { source: '1', target: '2' });

    await waitFor(() => expect(screen.queryByText('2')).toBeInTheDocument());
  });

  test('handles node layout change on direction change', async () => {
    axios.get.mockResolvedValueOnce({ data: mockNodesData });

    await act(async () => {
      render(<WrappedApp />);
    });

    await waitFor(() => expect(axios.get).toHaveBeenCalledTimes(1));

    const directionSelect = screen.getByLabelText('Direction:');
    fireEvent.change(directionSelect, { target: { value: 'BT' } });

    await waitFor(() => {
      const node1 = screen.getByText('1');
      expect(node1).toBeInTheDocument();
    });

    fireEvent.change(directionSelect, { target: { value: 'LR' } });

    await waitFor(() => {
      const node1 = screen.getByText('1');
      expect(node1).toBeInTheDocument();
    });
  });

  test('renders correct node colors based on type', async () => {
    const nodeDataWithTypes = [
      { node: '1', type: 'input', graphDepth: 0 },
      { node: '2', type: 'output', graphDepth: 1, parentNode: '1' },
      { node: '3', type: 'option', graphDepth: 1, parentNode: '1' },
      { node: '4', graphDepth: 2, parentNode: '2' },
    ];

    axios.get.mockResolvedValueOnce({ data: nodeDataWithTypes });

    await act(async () => {
      render(<WrappedApp />);
    });

    await waitFor(() => expect(axios.get).toHaveBeenCalledTimes(1));

    const node1 = screen.getByText('1');
    const node2 = screen.getByText('2');
    const node3 = screen.getByText('3');
    const node4 = screen.getByText('4');

    expect(node1).toHaveStyle('background-color: #FFD700');
    expect(node2).toHaveStyle('background-color: #FF6347');
    expect(node3).toHaveStyle('background-color: #40E0D0');
    expect(node4).toHaveStyle('background-color: #D3D3D3');
  });

  test('handles error in fetching nodes', async () => {
    axios.get.mockRejectedValueOnce(new Error('Error fetching node data'));

    await act(async () => {
      render(<WrappedApp />);
    });

    await waitFor(() => expect(axios.get).toHaveBeenCalledTimes(1));
    expect(screen.queryByText('1')).toBeNull();
  });
});




=======================





To write test cases for this code, you can use Jest along with React Testing Library. We'll focus on testing key aspects of the React component such as fetching nodes, updating the graph layout, expanding and collapsing nodes, and ensuring the dropdowns are populated correctly.

Here's how you can structure your files:

File Structure
bash
Copy code
/project-root
  /src
    /components
      App.tsx
      /__tests__
        App.test.tsx
      /styles
        styles.ts
    /mocks
      handlers.ts
      server.ts
    /utils
      graphUtils.ts
  /public
  /node_modules
  package.json
  tsconfig.json
  jest.config.js
Setup Mock Service Worker (MSW)
Mock Service Worker (MSW) can be used to mock API requests during testing.

/src/mocks/handlers.ts
typescript
Copy code
import { rest } from 'msw';

const nodesData = [
  // Provide mock data for testing
  { node: '1', type: 'input', value: 'Root Node', graphDepth: 0, parentNode: null },
  { node: '2', type: 'option', value: 'Child Node 1', graphDepth: 1, parentNode: '1' },
  { node: '3', type: 'output', value: 'Child Node 2', graphDepth: 1, parentNode: '1' },
];

export const handlers = [
  rest.get('https://api.example.com/nodes', (req, res, ctx) => {
    return res(ctx.status(200), ctx.json(nodesData));
  }),
];
/src/mocks/server.ts
typescript
Copy code
import { setupServer } from 'msw/node';
import { handlers } from './handlers';

export const server = setupServer(...handlers);
/src/setupTests.ts
typescript
Copy code
import '@testing-library/jest-dom';
import { server } from './mocks/server';

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());
Writing Test Cases
/src/components/tests/App.test.tsx
typescript
Copy code
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import WrappedApp from '../App';
import { server } from '../../mocks/server';
import { rest } from 'msw';

describe('App Component', () => {
  it('renders initial node and direction dropdown', async () => {
    render(<WrappedApp />);
    
    expect(screen.getByLabelText(/Direction/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Parent Node/i)).toBeInTheDocument();

    await waitFor(() => {
      expect(screen.getByText('Root Node')).toBeInTheDocument();
    });
  });

  it('expands and collapses nodes on click', async () => {
    render(<WrappedApp />);

    await waitFor(() => {
      expect(screen.getByText('Root Node')).toBeInTheDocument();
    });

    fireEvent.click(screen.getByText('Root Node'));

    await waitFor(() => {
      expect(screen.getByText('Child Node 1')).toBeInTheDocument();
      expect(screen.getByText('Child Node 2')).toBeInTheDocument();
    });

    fireEvent.click(screen.getByText('Root Node'));

    await waitFor(() => {
      expect(screen.queryByText('Child Node 1')).not.toBeInTheDocument();
      expect(screen.queryByText('Child Node 2')).not.toBeInTheDocument();
    });
  });

  it('changes graph direction', async () => {
    render(<WrappedApp />);

    await waitFor(() => {
      expect(screen.getByText('Root Node')).toBeInTheDocument();
    });

    fireEvent.change(screen.getByLabelText(/Direction/i), {
      target: { value: 'BT' },
    });

    // Assuming you would test the direction change visually or by layout position, which is complex for a unit test
  });

  it('populates parent node dropdown correctly', async () => {
    render(<WrappedApp />);

    await waitFor(() => {
      const parentNodeSelect = screen.getByLabelText(/Parent Node/i);
      fireEvent.click(parentNodeSelect);
    });

    await waitFor(() => {
      expect(screen.getByText('Root Node')).toBeInTheDocument();
    });
  });

  it('fetches and handles nodes data correctly', async () => {
    server.use(
      rest.get('https://api.example.com/nodes', (req, res, ctx) => {
        return res(ctx.status(200), ctx.json([
          { node: '4', type: 'input', value: 'New Root Node', graphDepth: 0, parentNode: null }
        ]));
      })
    );

    render(<WrappedApp />);

    await waitFor(() => {
      expect(screen.getByText('New Root Node')).toBeInTheDocument();
    });
  });
});
Utilities (Optional)
If you have utility functions that can be separated out, such as getLayoutedNodes, consider moving them to a separate file and writing tests for them.

/src/utils/graphUtils.ts
typescript
Copy code
import dagre from 'dagre';
import { Node, Edge } from 'reactflow';

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

export const getLayoutedNodes = (nodes: Node[], edges: Edge[], direction = 'TB') => {
  const nodeWidth = 172;
  const nodeHeight = 36;

  dagreGraph.setGraph({ rankdir: direction });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  return nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    return node;
  });
};
/src/utils/tests/graphUtils.test.ts
typescript
Copy code
import { getLayoutedNodes } from '../graphUtils';
import { Node, Edge } from 'reactflow';

describe('getLayoutedNodes', () => {
  it('should layout nodes correctly', () => {
    const nodes: Node[] = [
      { id: '1', data: { label: 'Node 1' }, position: { x: 0, y: 0 } },
      { id: '2', data: { label: 'Node 2' }, position: { x: 0, y: 0 } },
    ];

    const edges: Edge[] = [
      { id: 'e1-2', source: '1', target: '2' },
    ];

    const layoutedNodes = getLayoutedNodes(nodes, edges);
    expect(layoutedNodes).toHaveLength(2);
    expect(layoutedNodes[0].position).not.toEqual({ x: 0, y: 0 });
    expect(layoutedNodes[1].position).not.toEqual({ x: 0, y: 0 });
  });
});
Jest Configuration
jest.config.js
javascript
Copy code
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],
  moduleNameMapper: {
    '\\.(css|less)$': 'identity-obj-proxy',
  },
};
Dependencies
Ensure you have the necessary dependencies installed:

sh
Copy code
npm install --save-dev jest @testing-library/react @testing-library/jest-dom @testing-library/u
